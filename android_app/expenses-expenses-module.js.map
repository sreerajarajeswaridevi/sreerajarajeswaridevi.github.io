{"version":3,"sources":["./src/app/expenses/containers/expenses.component.html","./src/app/expenses/containers/expenses.component.scss","./src/app/expenses/containers/expenses.component.ts","./src/app/expenses/expenses-routing.module.ts","./src/app/expenses/expenses.module.ts","./src/app/expenses/services/expenses.service.ts","./src/app/expenses/store/expenses.actions.ts","./src/app/expenses/store/expenses.effects.ts","./src/app/expenses/store/expenses.reducer.ts","./src/app/expenses/store/expenses.selectors.ts","./src/app/expenses/store/expenses.state.ts"],"names":[],"mappings":"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","file":"expenses-expenses-module.js","sourcesContent":["export default \"<app-split-body [isLoading$]=\\\"!isLoading$\\\">\\r\\n  <div class=\\\"left-section\\\">\\r\\n    <mdb-card>\\r\\n      <mdb-card-header class=\\\"w-100 d-flex justify-space-between bg-primary white-text\\\">\\r\\n        <div>\\r\\n          <blockquote class=\\\"text-left  blockquote bq-success\\\">\\r\\n            <h3 class=\\\"header\\\">Add Expense</h3>\\r\\n          </blockquote>\\r\\n        </div>\\r\\n        <button mdbWavesEffect mdbBtn type=\\\"button\\\" rounded=\\\"true\\\" color=\\\"white\\\" class=\\\"pull-right text-lg btn-primary\\\" rrDatePicker [date]=\\\"expenseDate\\\" [endDate]=\\\"endDate\\\" [startDate]=\\\"startDate\\\"\\r\\n        header=\\\"Select Date\\\" (dateSelected)=\\\"expDatePicked($event)\\\">\\r\\n        <mdb-icon fas icon=\\\"calendar-alt mr-2\\\" size=\\\"lg\\\" class=\\\"calendar\\\" alt=\\\"date\\\"></mdb-icon> <span appDateTransform [date]=\\\"expenseDate.format('YYYYMMDD')\\\"></span>\\r\\n      </button>\\r\\n      </mdb-card-header>\\r\\n  \\r\\n      <mdb-card-body class=\\\"py-2\\\">\\r\\n        <form #expenseForm=\\\"ngForm\\\" autocomplete=\\\"on\\\">\\r\\n          <div class=\\\"d-flex\\\">\\r\\n          <div class=\\\"md-form\\\">\\r\\n            <input type=\\\"text\\\" id=\\\"item\\\" name=\\\"item\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"expense.item\\\" mdbInput mdbValidate [validateSuccess]=\\\"false\\\" #item=\\\"ngModel\\\" required>\\r\\n            <label for=\\\"item\\\">Item</label>\\r\\n            <mdb-error *ngIf=\\\"item && item.invalid && (item.dirty || item.touched)\\\">item is required</mdb-error>\\r\\n          </div>\\r\\n          <div class=\\\"suggestion-container\\\" *ngIf=\\\"frequentExpenses?.length\\\">\\r\\n            <mdb-badge class=\\\"cursor-pointer mr-1 p-2\\\" *ngFor=\\\"let expenseName of frequentExpenses\\\" pill=\\\"true\\\" [info]=\\\"expense.item !== expenseName\\\" [success]=\\\"expense.item === expenseName\\\" (click)=\\\"expense.item = expenseName\\\">{{ expenseName }}</mdb-badge>\\r\\n          </div>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"md-form\\\" style=\\\"margin-top: 15px;\\\">\\r\\n            <textarea type=\\\"text\\\" id=\\\"description\\\" name=\\\"description\\\" class=\\\"my-0 py-0 md-textarea form-control\\\" \\r\\n            #description=\\\"ngModel\\\" [(ngModel)]=\\\"expense.description\\\" mdbInput mdbValidate\\r\\n              [validateSuccess]=\\\"false\\\" required></textarea>\\r\\n            <label for=\\\"description\\\">Description</label>\\r\\n            <mdb-error *ngIf=\\\"description && description.invalid && (description.dirty || description.touched)\\\">Description is required</mdb-error>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"text-lg\\\">\\r\\n            <label for=\\\"cost\\\" class=\\\"grey-text\\\">Cost</label>\\r\\n            <div class=\\\"md-form mt-0\\\">\\r\\n              <span class=\\\"d-flex\\\">\\r\\n                <span class=\\\"price\\\">&#x20B9;</span>\\r\\n                <input type=\\\"number\\\" class=\\\"form-control price\\\" id=\\\"cost\\\" name=\\\"cost\\\" [(ngModel)]=\\\"expense.cost\\\" #cost=\\\"ngModel\\\" mdbValidate [validateSuccess]=\\\"false\\\" required>\\r\\n              </span>\\r\\n              <mdb-error class=\\\"ml-3\\\" *ngIf=\\\"cost && cost.invalid && (cost.dirty || cost.touched)\\\">Cost is required</mdb-error>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n        </form>\\r\\n      </mdb-card-body>\\r\\n      <mdb-card-footer class=\\\"d-flex\\\">\\r\\n        <button type=\\\"button\\\" mdbBtn color=\\\"white\\\" class=\\\"relative waves-light pull-right\\\" mdbWavesEffect (click)=\\\"expenseForm.reset()\\\">Clear\\r\\n          </button>\\r\\n        <button type=\\\"button\\\" mdbBtn color=\\\"success\\\" [disabled]=\\\"expenseForm.invalid || (isLoading$ | async)\\\" class=\\\"relative waves-light pull-right\\\" mdbWavesEffect (click)=\\\"onSave()\\\">Save & Print\\r\\n          </button>\\r\\n\\r\\n      </mdb-card-footer>\\r\\n    </mdb-card>\\r\\n\\r\\n\\r\\n    <mdb-card class=\\\"mt-2\\\" *ngIf=\\\"(isManager$ | async)\\\">\\r\\n      <!-- salary section -->\\r\\n      <mdb-card-header class=\\\"w-100 d-flex justify-space-between bg-primary white-text\\\">\\r\\n        <div>\\r\\n          <blockquote class=\\\"text-left  blockquote bq-success\\\">\\r\\n            <h3 class=\\\"header\\\">Record Salary</h3>\\r\\n          </blockquote>\\r\\n        </div>\\r\\n        <button mdbWavesEffect mdbBtn type=\\\"button\\\" rounded=\\\"true\\\" color=\\\"white\\\" class=\\\"pull-right text-lg btn-primary\\\" rrDatePicker [date]=\\\"salaryDate\\\" [endDate]=\\\"endDate\\\" [startDate]=\\\"startDate\\\"\\r\\n        header=\\\"Select Salary Given Date\\\" (dateSelected)=\\\"salDatePicked($event)\\\">\\r\\n        <mdb-icon fas icon=\\\"calendar-alt mr-2\\\" size=\\\"lg\\\" class=\\\"calendar\\\" alt=\\\"date\\\"></mdb-icon> {{ salaryDate.format('dddd DD/MM/YYYY') }}\\r\\n      </button>\\r\\n      </mdb-card-header>\\r\\n  \\r\\n      <mdb-card-body class=\\\"py-2\\\">\\r\\n        <form #salaryForm=\\\"ngForm\\\">\\r\\n          <div class=\\\"d-flex\\\">\\r\\n          <div class=\\\"md-form\\\">\\r\\n            <input type=\\\"text\\\" id=\\\"description\\\" name=\\\"description\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"salary.description\\\" mdbInput mdbValidate [validateSuccess]=\\\"false\\\" #description=\\\"ngModel\\\" required>\\r\\n            <label for=\\\"description\\\">Paid To:</label>\\r\\n            <mdb-error *ngIf=\\\"description && description.invalid && (description.dirty || description.touched)\\\">Person Name is required</mdb-error>\\r\\n          </div>\\r\\n          <div class=\\\"suggestion-container\\\" *ngIf=\\\"frequentSalaries?.length\\\">\\r\\n            <mdb-badge class=\\\"cursor-pointer mr-1\\\" *ngFor=\\\"let item of frequentSalaries\\\" pill=\\\"true\\\" [info]=\\\"item.person !== salary.description\\\" [success]=\\\"item.person === salary.description\\\" (click)=\\\"salary.description = item.person; salary.cost = item.amount\\\">{{ item.person }}</mdb-badge>\\r\\n          </div>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"text-lg\\\">\\r\\n            <label for=\\\"cost\\\" class=\\\"grey-text\\\">Amount</label>\\r\\n            <div class=\\\"md-form mt-0\\\">\\r\\n              <span class=\\\"d-flex\\\">\\r\\n                <span class=\\\"price\\\">&#x20B9;</span>\\r\\n                <input type=\\\"number\\\" class=\\\"form-control price\\\" id=\\\"cost\\\" name=\\\"cost\\\" [(ngModel)]=\\\"salary.cost\\\" #cost=\\\"ngModel\\\" mdbValidate [validateSuccess]=\\\"false\\\" required>\\r\\n              </span>\\r\\n              <mdb-error class=\\\"ml-3\\\" *ngIf=\\\"cost && cost.invalid && (cost.dirty || cost.touched)\\\">Amount is required</mdb-error>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n        </form>\\r\\n      </mdb-card-body>\\r\\n      <mdb-card-footer class=\\\"d-flex\\\">\\r\\n        <button type=\\\"button\\\" mdbBtn color=\\\"white\\\" class=\\\"relative waves-light pull-right\\\" mdbWavesEffect (click)=\\\"salaryForm.reset()\\\">Clear\\r\\n          </button>\\r\\n        <button type=\\\"button\\\" mdbBtn color=\\\"success\\\" [disabled]=\\\"salaryForm.invalid || (isLoading$ | async)\\\" class=\\\"relative waves-light pull-right\\\" mdbWavesEffect (click)=\\\"onSalarySave(salaryForm)\\\">Save & Print\\r\\n          </button>\\r\\n      </mdb-card-footer>\\r\\n    </mdb-card>\\r\\n  </div>\\r\\n  <div class=\\\"right-section pb-4\\\">\\r\\n    <app-right-card [header]=\\\"'Todays Expenses'\\\" >\\r\\n      <div class=\\\"card-header bg-primary white-text\\\">\\r\\n        <span class=\\\"icon-button\\\" (click)=\\\"prevDate()\\\">\\r\\n          <mdb-icon *ngIf=\\\"isManager$ | async\\\" fas icon=\\\"chevron-left\\\" class=\\\"ml-1 float-left delete cursor-pointer white-text\\\" alt=\\\"Left\\\"></mdb-icon>\\r\\n        </span>\\r\\n        <span>\\r\\n          Expense on \\r\\n          <button [disabled]=\\\"!(isManager$ | async)\\\" mdbWavesEffect mdbBtn type=\\\"button\\\" rounded=\\\"true\\\" color=\\\"white\\\" class=\\\"pull-right text-lg btn-primary\\\" rrDatePicker [date]=\\\"defaultDate\\\" [endDate]=\\\"defaultDate\\\" [startDate]=\\\"startDate\\\"\\r\\n          (click)=\\\"dateClicked($event)\\\" header=\\\"Select Date\\\" (dateSelected)=\\\"datePicked($event)\\\">\\r\\n            <mdb-icon fas icon=\\\"calendar-alt mr-2\\\" size=\\\"lg\\\" class=\\\"calendar\\\" alt=\\\"date\\\"></mdb-icon> {{ formattedDate }}\\r\\n          </button>\\r\\n        </span>\\r\\n        <span class=\\\"icon-button\\\" (click)=\\\"nextDate()\\\">\\r\\n          <mdb-icon *ngIf=\\\"(isManager$ | async) && selectedDate.format('DD/MM/YYYY') !== defaultDate.format('DD/MM/YYYY')\\\" mdbtn fas icon=\\\"chevron-right\\\" class=\\\"ml-1 float-right delete cursor-pointer white-text\\\" alt=\\\"Right\\\"></mdb-icon>\\r\\n        </span>\\r\\n      </div>\\r\\n      <div *ngIf=\\\"isLoading$ | async\\\" class=\\\"d-flex justify-content-center align-items-center\\\">\\r\\n        <div class=\\\"spinner-grow text-primary\\\" role=\\\"status\\\" style=\\\"width: 4rem; height: 4rem;\\\">\\r\\n          <span class=\\\"sr-only\\\">Loading...</span>\\r\\n        </div>\\r\\n      </div>\\r\\n      <table mdbTable small=\\\"true\\\" striped=\\\"true\\\" *ngIf=\\\"!(isLoading$ | async) && todaysExpenseList.length > 0\\\">\\r\\n        <thead>\\r\\n          <tr>\\r\\n            <th>Item</th>\\r\\n            <th>Description</th>\\r\\n            <th>Cost</th>\\r\\n          </tr>\\r\\n        </thead>\\r\\n        <tbody>\\r\\n          <tr *ngFor=\\\"let item of todaysExpenseList\\\" [class.salary]=\\\"item?.item === 'Salary'\\\">\\r\\n            <td scope=\\\"row\\\">{{ item?.item }}</td>\\r\\n            <td>{{ item?.description }}</td>\\r\\n            <td class=\\\"table-price\\\">&#x20B9;{{ item?.cost }}</td>\\r\\n            <td>\\r\\n              <app-printer [type]=\\\"'expense'\\\" [size]=\\\"'bill'\\\" [expense]=\\\"item\\\"></app-printer> \\r\\n              <mdb-icon *ngIf=\\\"isManager$ | async\\\" fas icon=\\\"trash\\\" class=\\\"ml-1 float-right delete grey-text\\\" (click)=\\\"onDelete(item?.uuid)\\\" alt=\\\"Delete\\\"></mdb-icon>\\r\\n            </td>\\r\\n          </tr>\\r\\n\\r\\n          <tr>\\r\\n          </tr>\\r\\n        </tbody>\\r\\n      </table>\\r\\n      <div role=\\\"footer\\\" *ngIf=\\\"!(isLoading$ | async)\\\">\\r\\n        <div class=\\\"card-footer text-muted\\\">\\r\\n          Total: <b class=\\\"price total-amount\\\">&#x20B9;{{getTotalExpense()}}</b>\\r\\n        </div>\\r\\n      </div>\\r\\n    </app-right-card>\\r\\n\\r\\n    <!-- <div *ngIf=\\\"isLoading$ | async\\\" class=\\\"d-flex justify-content-center align-items-center\\\" style=\\\"margin-top: 200px\\\">\\r\\n      <div class=\\\"spinner-grow text-primary\\\" role=\\\"status\\\" style=\\\"width: 4rem; height: 4rem;\\\">\\r\\n        <span class=\\\"sr-only\\\">Loading...</span>\\r\\n      </div>\\r\\n    </div> -->\\r\\n  </div>\\r\\n</app-split-body>\\r\\n\\r\\n<app-printer #appPrinter [type]=\\\"'expense'\\\" [hidden]=\\\"true\\\"></app-printer>\"","export default \".justify-space-between {\\n  justify-content: space-between;\\n}\\n\\n.price {\\n  font-size: 24px;\\n}\\n\\n.table-price {\\n  font-weight: bold;\\n}\\n\\n.right-section table {\\n  text-align: left;\\n  margin-bottom: 0;\\n}\\n\\n.right-section table .total-amount {\\n  font-weight: bold;\\n  font-size: 18px;\\n}\\n\\n.right-section table .delete {\\n  cursor: pointer;\\n}\\n\\n.right-section table tr.salary {\\n  background-color: #d8fdd8;\\n}\\n\\n.card-header {\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between;\\n}\\n\\n.card-body {\\n  padding: 0 1.25rem;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZXhwZW5zZXMvY29udGFpbmVycy9DOlxcZ2l0IGNvZGVcXEF1ZGl0LVVJLUFuZ3VsYXIvc3JjXFxhcHBcXGV4cGVuc2VzXFxjb250YWluZXJzXFxleHBlbnNlcy5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvZXhwZW5zZXMvY29udGFpbmVycy9leHBlbnNlcy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLDhCQUFBO0FDQ0o7O0FERUE7RUFDSSxlQUFBO0FDQ0o7O0FERUE7RUFDSSxpQkFBQTtBQ0NKOztBRElJO0VBQ0ksZ0JBQUE7RUFDQSxnQkFBQTtBQ0RSOztBREdRO0VBQ0ksaUJBQUE7RUFDQSxlQUFBO0FDRFo7O0FER1E7RUFDSSxlQUFBO0FDRFo7O0FER1E7RUFDSSx5QkFBQTtBQ0RaOztBRE9BO0VBQ0ksYUFBQTtFQUNBLG1CQUFBO0VBQ0EsOEJBQUE7QUNKSjs7QURPQTtFQUNJLGtCQUFBO0FDSkoiLCJmaWxlIjoic3JjL2FwcC9leHBlbnNlcy9jb250YWluZXJzL2V4cGVuc2VzLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmp1c3RpZnktc3BhY2UtYmV0d2VlbiB7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbn1cclxuXHJcbi5wcmljZSB7XHJcbiAgICBmb250LXNpemU6IDI0cHg7XHJcbn1cclxuXHJcbi50YWJsZS1wcmljZSB7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5cclxuLnJpZ2h0LXNlY3Rpb24ge1xyXG4gXHJcbiAgICB0YWJsZSB7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgICAgICBtYXJnaW4tYm90dG9tOiAwO1xyXG5cclxuICAgICAgICAudG90YWwtYW1vdW50IHtcclxuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLmRlbGV0ZSB7XHJcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHIuc2FsYXJ5IHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIxNiwgMjUzLCAyMTYpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcbi5jYXJkLWhlYWRlciB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxufVxyXG4gICBcclxuLmNhcmQtYm9keSB7XHJcbiAgICBwYWRkaW5nOiAwIDEuMjVyZW07XHJcbn0iLCIuanVzdGlmeS1zcGFjZS1iZXR3ZWVuIHtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xufVxuXG4ucHJpY2Uge1xuICBmb250LXNpemU6IDI0cHg7XG59XG5cbi50YWJsZS1wcmljZSB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4ucmlnaHQtc2VjdGlvbiB0YWJsZSB7XG4gIHRleHQtYWxpZ246IGxlZnQ7XG4gIG1hcmdpbi1ib3R0b206IDA7XG59XG4ucmlnaHQtc2VjdGlvbiB0YWJsZSAudG90YWwtYW1vdW50IHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGZvbnQtc2l6ZTogMThweDtcbn1cbi5yaWdodC1zZWN0aW9uIHRhYmxlIC5kZWxldGUge1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG4ucmlnaHQtc2VjdGlvbiB0YWJsZSB0ci5zYWxhcnkge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDhmZGQ4O1xufVxuXG4uY2FyZC1oZWFkZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG59XG5cbi5jYXJkLWJvZHkge1xuICBwYWRkaW5nOiAwIDEuMjVyZW07XG59Il19 */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { AppState } from 'src/app/reducers';\r\nimport { getExpenses, getIsLoading } from '../store/expenses.selectors';\r\nimport * as fromExpenses from '../store/expenses.actions';\r\nimport { getUser, isManager } from '../../auth/store/auth.selectors';\r\nimport { Expenses } from '../models/expenses.model';\r\nimport { MDBModalRef, MDBModalService } from 'angular-bootstrap-md';\r\nimport { ConfirmModalComponent } from 'src/app/shared/components/confirm-modal/confirm-modal.component';\r\nimport { take } from 'rxjs/operators';\r\nimport { NgxIndexedDBService } from 'ngx-indexed-db';\r\nimport { PrinterComponent } from 'src/app/shared/components/printer/printer.component';\r\nimport { User } from 'src/app/auth/models/user.model';\r\nimport { ExpensesService } from '../services/expenses.service';\r\n\r\nvar moment = require('../../../assets/datepicker/moment.js');\r\n\r\n@Component({\r\n  selector: 'app-expenses',\r\n  templateUrl: './expenses.component.html',\r\n  styleUrls: ['./expenses.component.scss']\r\n})\r\nexport class ExpensesComponent implements OnInit {\r\n  isLoading$: Observable<boolean>;\r\n  isManager$: Observable<boolean>;\r\n  user: User;\r\n  \r\n  expenseDate = moment();\r\n  salaryDate = moment();\r\n\r\n  defaultDate = moment();\r\n  startDate = moment().subtract(60, 'days');\r\n  endDate = moment().add('30', 'days');\r\n  selectedDate = moment();\r\n  \r\n  expense: any = {\r\n    ist_YYYYMMDD: moment().format('YYYY-MM-DD')\r\n  };\r\n  expenseCopy: any;\r\n  salary: any = {\r\n    item: 'Salary',\r\n    description: '',\r\n    cost: '',\r\n    ist_YYYYMMDD: moment().format('YYYY-MM-DD')\r\n  };\r\n\r\n  todaysExpenseList: Expenses[];\r\n\r\n  frequentExpenses: Array<string>\r\n  frequentSalaries: Array<any>\r\n\r\n  @ViewChild('expenseForm', { static: true }) expenseForm: NgForm;\r\n  @ViewChild('salaryForm', { static: true }) salaryForm: NgForm;\r\n  @ViewChild('appPrinter', { static: true }) appPrinter: PrinterComponent;\r\n  \r\n  private modalRef: MDBModalRef;\r\n\r\n\r\n  constructor(\r\n    private store: Store<AppState>,\r\n    private modalService: MDBModalService,\r\n    private idbService: NgxIndexedDBService,\r\n    private expenseService: ExpensesService\r\n  ) {}\r\n\r\n  get formattedDate() {\r\n    return this.selectedDate.format('dddd DD/MM/YYYY');\r\n  }\r\n\r\n  dateClicked(event: any) {\r\n    console.log(event);\r\n  }\r\n\r\n  expDatePicked(date: any) {\r\n    this.expenseDate = date;\r\n    this.expense.ist_YYYYMMDD = date.format('YYYY-MM-DD');\r\n  }\r\n\r\n  salDatePicked(date: any) {\r\n    this.salaryDate = date;\r\n    this.salary.ist_YYYYMMDD = date.format('YYYY-MM-DD');\r\n  }\r\n  \r\n  datePicked(date: any) {\r\n    this.selectedDate = date;\r\n    this.store.dispatch(new fromExpenses.ExpensesQuery(date.format('YYYY-MM-DD')));\r\n  }\r\n\r\n  prevDate() {\r\n    this.datePicked(this.selectedDate.subtract('1', 'days'));\r\n  }\r\n\r\n  nextDate() {\r\n    this.datePicked(this.selectedDate.add('1', 'days'));\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.store.select(getExpenses).subscribe((exp: Expenses[]) => {\r\n      this.todaysExpenseList = exp;\r\n      this.fetchFrequentExpenses();\r\n      this.fetchFrequentSalaries();\r\n    });\r\n    this.store.select(getUser).subscribe((user: any) => {\r\n      this.user = user;\r\n    });\r\n    this.expenseService.newExpenseAdded.subscribe((receipt_number: string) => {\r\n      if (receipt_number) {\r\n        const expenseCopy = JSON.parse(JSON.stringify(this.expenseCopy));\r\n        this.appPrinter.expense = {\r\n          ...expenseCopy,\r\n          added_by: this.user.displayName,\r\n          expense_date: this.expenseDate.format('DD-MM-YYYY'),\r\n          receipt_number\r\n        };\r\n        this.appPrinter.triggerPrint();\r\n        this.expenseCopy = null;\r\n      }\r\n    })\r\n    this.isLoading$ = this.store.select(getIsLoading);\r\n    this.isManager$ = this.store.select(isManager);\r\n    this.store.dispatch(new fromExpenses.ExpensesQuery(this.selectedDate.format('YYYY-MM-DD')));\r\n  }\r\n\r\n  fetchFrequentExpenses() {\r\n    this.idbService\r\n      .getAll('expenses')\r\n      .subscribe((expense: any) => {\r\n        if (expense && expense.length > 0) {\r\n          expense = expense.sort((a: any, b: any) => {\r\n            if (a.frequency > b.frequency) {\r\n              return -1;\r\n            } else if (a.frequency > b.frequency){\r\n              return 1;\r\n            }\r\n            return 0;\r\n          }).splice(0, 5);\r\n          this.frequentExpenses = expense.map((data: any) => data.item);\r\n        }\r\n      });\r\n  }\r\n\r\n  fetchFrequentSalaries() {\r\n    this.idbService\r\n      .getAll('salary')\r\n      .subscribe((salary: any) => {\r\n        if (salary && salary.length > 0) {\r\n          this.frequentSalaries = salary.sort((a: any, b: any) => {\r\n            if (a.frequency > b.frequency) {\r\n              return -1;\r\n            } else if (a.frequency > b.frequency){\r\n              return 1;\r\n            }\r\n            return 0;\r\n          }).splice(0, 5);\r\n        }\r\n      });\r\n  }\r\n\r\n  onSave() {\r\n    this.expenseCopy = JSON.parse(JSON.stringify(this.expense));\r\n    this.store.dispatch(new fromExpenses.ExpensesAddQuery(this.expense));\r\n    \r\n    this.idbService\r\n      .getByKey('expenses', this.expenseCopy.item)\r\n      .subscribe((data) => {\r\n        if (!data) {\r\n          this.idbService.add('expenses', {\r\n            item: this.expenseCopy.item,\r\n            frequency: 1\r\n          })\r\n        } else {\r\n          this.idbService.update('expenses',\r\n          {\r\n            item: this.expenseCopy.item,\r\n            frequency: (data as any).frequency + 1\r\n          }, (data as any).key)\r\n        }\r\n      });\r\n      this.expense = {\r\n        ist_YYYYMMDD: moment().format('YYYY-MM-DD')\r\n      };\r\n      this.expenseForm.reset();\r\n      this.selectedDate = moment();\r\n      this.expenseDate = moment();\r\n\r\n  }\r\n\r\n  resetAll() {\r\n    \r\n    \r\n  }\r\n\r\n  getTotalExpense() {\r\n    if (this.todaysExpenseList && this.todaysExpenseList.length > 0) {\r\n      return this.todaysExpenseList.reduce(((prev ,current: any) => +(current.cost) + prev), 0);\r\n    }\r\n    return '0';\r\n  }\r\n\r\n  onDelete(uuid: string) {\r\n    this.modalRef = this.modalService.show(\r\n      ConfirmModalComponent,{class: 'modal-dialog-centered'}\r\n    );\r\n\r\n    this.modalRef.content.confirmation\r\n      .pipe(take(1))\r\n      .subscribe((confirmation: boolean) => {\r\n        if (confirmation) {\r\n          this.store.dispatch(new fromExpenses.ExpensesDeleted({ uuid: uuid }));\r\n        }\r\n      });\r\n  }\r\n\r\n  onSalarySave(form: NgForm) {\r\n    this.expenseCopy = JSON.parse(JSON.stringify(this.salary));\r\n    this.store.dispatch(new fromExpenses.ExpensesAddQuery(this.salary));\r\n    this.idbService\r\n      .getByKey('salary', this.expenseCopy.description)\r\n      .subscribe((data) => {\r\n        if (!data) {\r\n          this.idbService.add('salary', {\r\n            person: this.expenseCopy.description,\r\n            amount: this.expenseCopy.cost,\r\n            frequency: 1\r\n          })\r\n        } else {\r\n          this.idbService.update('salary',\r\n          {\r\n            person: this.expenseCopy.description,\r\n            amount: this.expenseCopy.cost,\r\n            frequency: (data as any).frequency + 1\r\n          }, (data as any).key)\r\n        }\r\n      });\r\n\r\n    this.salary = {\r\n      item: 'Salary',\r\n      description: '',\r\n      cost: '',\r\n      ist_YYYYMMDD: moment().format('YYYY-MM-DD')\r\n    };\r\n    form.reset();\r\n    this.salaryDate = moment();\r\n    this.salary = {};\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ExpensesComponent } from './containers/expenses.component';\r\n\r\nconst routes: Routes = [{ path: '', component: ExpensesComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ExpensesRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ExpensesRoutingModule } from './expenses-routing.module';\r\nimport { ExpensesComponent } from './containers/expenses.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ButtonsModule, InputsModule, TableModule, IconsModule, ModalModule, CardsModule, InputUtilitiesModule, BadgeModule } from 'angular-bootstrap-md';\r\n\r\nimport * as fromExpenses from './store/expenses.reducer';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { ExpensesEffects } from './store/expenses.effects';\r\nimport { CoreModule } from '../core/core.module';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { IndexedDBModule } from './indexedDB/indexedDB.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ExpensesRoutingModule,\r\n    ModalModule,\r\n    FormsModule,\r\n    ButtonsModule,\r\n    InputUtilitiesModule,\r\n    InputsModule,\r\n    IconsModule,\r\n    TableModule,\r\n    CoreModule,\r\n    SharedModule,\r\n    CardsModule,\r\n    IndexedDBModule,\r\n    BadgeModule,\r\n    StoreModule.forFeature('expenses', fromExpenses.ExpensesReducer),\r\n    EffectsModule.forFeature([ExpensesEffects])\r\n  ],\r\n  declarations: [ExpensesComponent],\r\n  exports: [ExpensesComponent]\r\n})\r\nexport class ExpensesModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { Expenses } from '../models/expenses.model';\r\nimport { of, Subject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExpensesService {\r\n  private $newExpenseAdded = new Subject<string>();\r\n  public newExpenseAdded = this.$newExpenseAdded.asObservable();\r\n \r\n  constructor(private http: HttpClient) { }\r\n\r\n  get userId() {\r\n    return 'uid';\r\n  }\r\n\r\n  emitNewExpense(receipt_number: string) {\r\n    this.$newExpenseAdded.next(receipt_number);\r\n  }\r\n\r\n  addExpenses(expenses: Expenses) {\r\n    return this.http.post(\r\n      `${environment.apiUrl}?api=addExpense`, { \r\n        ...expenses }\r\n    );\r\n  }\r\n\r\n  get(request: any) {\r\n    return this.http.get(\r\n      `${environment.apiUrl}?api=listExpenses`, \r\n      {\r\n        params: {\r\n        'ist_YYYYMMDD': request.payload\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  update(expenses: Expenses, userId: string) {\r\n    return of([expenses, userId]);\r\n\r\n  }\r\n\r\n  deleteExpense(uuId: string) {\r\n    return this.http.post(\r\n      `${environment.apiUrl}?api=deleteExpense`, { \r\n        'uuid': uuId   \r\n      }\r\n    );\r\n  }\r\n}\r\n","import { Action } from '@ngrx/store';\r\nimport { Expenses } from '../models/expenses.model';\r\n\r\nexport enum ExpensesActionTypes {\r\n  EXPENSES_QUERY = '[Expenses] Query',\r\n  EXPENSES_LOADED = '[Expenses] Fetched',\r\n\r\n  EXPENSES_ADD_QUERY = '[Expenses] Added',\r\n  EXPENSES_EDITED = '[Expenses] Edited',\r\n  EXPENSES_DELETED = '[Expenses] Deleted',\r\n\r\n  EXPENSES_ERROR = '[Expenses] Error'\r\n}\r\n\r\nexport class ExpensesQuery implements Action {\r\n  readonly type = ExpensesActionTypes.EXPENSES_QUERY;\r\n  \r\n  constructor(public payload: { date: any }) {}\r\n}\r\n\r\nexport class ExpensesLoaded implements Action {\r\n  readonly type = ExpensesActionTypes.EXPENSES_LOADED;\r\n\r\n  constructor(public payload: { expenses: Expenses[] }) {}\r\n}\r\n\r\nexport class ExpensesAddQuery implements Action {\r\n  readonly type = ExpensesActionTypes.EXPENSES_ADD_QUERY;\r\n\r\n  constructor(public payload: { expenses: Expenses }) {}\r\n}\r\n\r\nexport class ExpensesEdited implements Action {\r\n  readonly type = ExpensesActionTypes.EXPENSES_EDITED;\r\n\r\n  constructor(public payload: { expenses: Expenses }) {}\r\n}\r\n\r\nexport class ExpensesDeleted implements Action {\r\n  readonly type = ExpensesActionTypes.EXPENSES_DELETED;\r\n\r\n  constructor(public payload: { uuid: string }) {}\r\n}\r\n\r\nexport class ExpensesError implements Action {\r\n  readonly type = ExpensesActionTypes.EXPENSES_ERROR;\r\n\r\n  constructor(public payload: { error: any }) {}\r\n}\r\n\r\nexport type ExpensesActions =\r\n  | ExpensesQuery\r\n  | ExpensesLoaded\r\n  | ExpensesAddQuery\r\n  | ExpensesEdited\r\n  | ExpensesDeleted\r\n  | ExpensesError;\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { ExpensesService } from '../services/expenses.service';\r\nimport { ExpensesActionTypes } from './expenses.actions';\r\nimport { switchMap, map, catchError, withLatestFrom } from 'rxjs/operators';\r\n\r\nimport * as fromExpenses from './expenses.actions';\r\nimport { of } from 'rxjs';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { AppState } from '../../reducers/index';\r\nimport { getUser } from '../../auth/store/auth.selectors';\r\n\r\nvar moment = require('../../../assets/datepicker/moment.js');\r\n\r\n@Injectable()\r\nexport class ExpensesEffects {\r\n\r\n  constructor(private expenseService: ExpensesService,\r\n    private actions$: Actions, private expensesService: ExpensesService, private store: Store<AppState>) {}\r\n\r\n  @Effect()\r\n  query$ = this.actions$.pipe(\r\n    ofType(ExpensesActionTypes.EXPENSES_QUERY),\r\n    switchMap((payload: any) => this.expensesService.get(payload)\r\n      .pipe(\r\n        map((data: any) => {\r\n          return (new fromExpenses.ExpensesLoaded({ expenses: data.expensesList }));\r\n        }),\r\n        catchError(error => {\r\n          return of(new fromExpenses.ExpensesError({ error }));\r\n        })\r\n      )\r\n    ),\r\n  );\r\n\r\n  @Effect()\r\n  added$ = this.actions$.pipe(\r\n    ofType(ExpensesActionTypes.EXPENSES_ADD_QUERY),\r\n    map((action: fromExpenses.ExpensesAddQuery) => action.payload),\r\n    switchMap((payload: any) => this.expensesService.addExpenses(payload)\r\n    .pipe(\r\n      (map((response: any) => {\r\n        this.expenseService.emitNewExpense(response.receipt_number);\r\n        return (new fromExpenses.ExpensesQuery(moment().format('YYYY-MM-DD')));\r\n      })),\r\n      catchError(error => {\r\n        return of(new fromExpenses.ExpensesError({ error }));\r\n      })\r\n    ))\r\n  );\r\n\r\n  @Effect()\r\n  edit$ = this.actions$.pipe(\r\n    ofType(ExpensesActionTypes.EXPENSES_EDITED),\r\n    map((action: fromExpenses.ExpensesEdited) => action.payload),\r\n    withLatestFrom(this.store.pipe(select(getUser))),\r\n    switchMap(([payload, user]: any) => this.expensesService.update(payload.customer, user.temple_code)\r\n    .pipe(\r\n      catchError( error => {\r\n      return of(new fromExpenses.ExpensesError({ error }));\r\n    }))\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  delete$ = this.actions$.pipe(\r\n    ofType(ExpensesActionTypes.EXPENSES_DELETED),\r\n    map((action: fromExpenses.ExpensesDeleted) => action.payload),\r\n    withLatestFrom(this.store.pipe(select(getUser))),\r\n    switchMap(([payload]: any) => this.expensesService.deleteExpense(payload.uuid)\r\n    .pipe(\r\n      (map(() => {\r\n        return (new fromExpenses.ExpensesQuery(moment().format('YYYY-MM-DD')));\r\n      })),\r\n      catchError(error => {\r\n        return of(new fromExpenses.ExpensesError({ error }));\r\n      })\r\n    ))\r\n  );\r\n}\r\n","import { ExpensesInitialState, ExpensesState } from './expenses.state';\r\nimport { ExpensesActions, ExpensesActionTypes } from './expenses.actions';\r\n\r\nexport function ExpensesReducer(state = ExpensesInitialState, action: ExpensesActions): ExpensesState {\r\n  switch (action.type) {\r\n\r\n    case ExpensesActionTypes.EXPENSES_QUERY: {\r\n      return Object.assign({}, state, {\r\n        isLoading: true,\r\n      });\r\n    }\r\n\r\n    case ExpensesActionTypes.EXPENSES_ADD_QUERY: {\r\n      return Object.assign({}, state, {\r\n        isLoading: true,\r\n      });\r\n    }\r\n\r\n    case ExpensesActionTypes.EXPENSES_LOADED: {\r\n      return Object.assign({}, state, {\r\n        expenses: action.payload.expenses,\r\n        isLoading: false,\r\n      });\r\n    }\r\n\r\n    case ExpensesActionTypes.EXPENSES_ERROR: {\r\n      return Object.assign({}, state, {\r\n        isLoading: false,\r\n        error: action.payload.error\r\n      });\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createSelector, createFeatureSelector } from '@ngrx/store';\r\nimport { ExpensesState } from './expenses.state';\r\n\r\nexport const getExpensesState = createFeatureSelector<ExpensesState>('expenses');\r\n\r\nexport const getExpenses = createSelector(\r\n  getExpensesState,\r\n  expenses => expenses.expenses\r\n);\r\n\r\nexport const getIsLoading = createSelector(\r\n  getExpensesState,\r\n  expenses => expenses.isLoading\r\n);\r\n\r\nexport const getError = createSelector(\r\n  getExpensesState,\r\n  expenses => expenses.error\r\n);\r\n","import { Expenses } from '../models/expenses.model';\r\n\r\nexport interface ExpensesState {\r\n    expenses: Expenses[] | null;\r\n    isLoading: boolean;\r\n    error: any;\r\n}\r\n\r\nexport const ExpensesInitialState: ExpensesState = {\r\n    expenses: [],\r\n    isLoading: true,\r\n    error: null\r\n};\r\n"],"sourceRoot":"webpack:///"}