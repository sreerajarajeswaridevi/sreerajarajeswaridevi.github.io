{"version":3,"sources":["./node_modules/ngx-indexed-db/fesm2015/ngx-indexed-db.js","./node_modules/ngx-indexed-db/node_modules/tslib/tslib.es6.js","./src/app/expenses/containers/expenses.component.html","./src/app/expenses/containers/expenses.component.scss","./src/app/expenses/containers/expenses.component.ts","./src/app/expenses/expenses-routing.module.ts","./src/app/expenses/expenses.module.ts","./src/app/expenses/indexedDB/indexedDB.module.ts","./src/app/expenses/services/expenses.service.ts","./src/app/expenses/store/expenses.actions.ts","./src/app/expenses/store/expenses.effects.ts","./src/app/expenses/store/expenses.reducer.ts","./src/app/expenses/store/expenses.selectors.ts","./src/app/expenses/store/expenses.state.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0F;AACxB;AAChC;AACG;AACC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,cAAc;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,UAAU;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC,wBAAwB;AACzB,yBAAyB,4DAAc;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yEAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,IAAqC;AAC7D;AACA,uFAAuF,mBAAmB;AAC1G,kCAAkC;AAClC,kCAAkC;AAClC;AACA,6DAA6D,WAAW;AACxE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb,SAAS;AACT,eAAe,iDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,UAAU,oBAAoB,EAAE;AACtE;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,2DAAI;AAClC;AACA;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,2DAAI;AAClC;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAI,kCAAkC,uDAAS;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4CAAO;AAC/B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iDAAiD;AACpF;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AA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","file":"expenses-expenses-module.js","sourcesContent":["import { InjectionToken, Injectable, Inject, PLATFORM_ID, NgModule } from '@angular/core';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport { __awaiter } from 'tslib';\nimport { from, Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nfunction openDatabase(indexedDB, dbName, version, upgradeCallback) {\n    return new Promise((resolve, reject) => {\n        if (!indexedDB) {\n            reject('IndexedDB not available');\n        }\n        const request = indexedDB.open(dbName, version);\n        let db;\n        request.onsuccess = (event) => {\n            db = request.result;\n            resolve(db);\n        };\n        request.onerror = (event) => {\n            reject(`IndexedDB error: ${request.error}`);\n        };\n        if (typeof upgradeCallback === 'function') {\n            request.onupgradeneeded = (event) => {\n                upgradeCallback(event, db);\n            };\n        }\n    });\n}\nfunction CreateObjectStore(indexedDB, dbName, version, storeSchemas, migrationFactory) {\n    if (!indexedDB) {\n        return;\n    }\n    const request = indexedDB.open(dbName, version);\n    request.onupgradeneeded = (event) => {\n        const database = event.target.result;\n        storeSchemas.forEach((storeSchema) => {\n            if (!database.objectStoreNames.contains(storeSchema.store)) {\n                const objectStore = database.createObjectStore(storeSchema.store, storeSchema.storeConfig);\n                storeSchema.storeSchema.forEach((schema) => {\n                    objectStore.createIndex(schema.name, schema.keypath, schema.options);\n                });\n            }\n        });\n        const storeMigrations = migrationFactory && migrationFactory();\n        if (storeMigrations) {\n            Object.keys(storeMigrations)\n                .map((k) => parseInt(k, 10))\n                .filter((v) => v > event.oldVersion)\n                .sort((a, b) => a - b)\n                .forEach((v) => {\n                storeMigrations[v](database, request.transaction);\n            });\n        }\n        database.close();\n    };\n    request.onsuccess = (e) => {\n        e.target.result.close();\n    };\n}\n\nfunction validateStoreName(db, storeName) {\n    return db.objectStoreNames.contains(storeName);\n}\nfunction validateBeforeTransaction(db, storeName, reject) {\n    if (!db) {\n        reject('You need to use the openDatabase function to create a database before you query it!');\n    }\n    if (!validateStoreName(db, storeName)) {\n        reject(`objectStore does not exists: ${storeName}`);\n    }\n}\nfunction createTransaction(db, options) {\n    const trans = db.transaction(options.storeName, options.dbMode);\n    trans.onerror = options.error;\n    trans.oncomplete = options.complete;\n    trans.onabort = options.abort;\n    return trans;\n}\nfunction optionsGenerator(type, storeName, reject, resolve) {\n    return {\n        storeName,\n        dbMode: type,\n        error: (e) => {\n            reject(e);\n        },\n        complete: (e) => {\n            resolve(e);\n        },\n        abort: (e) => {\n            reject(e);\n        },\n    };\n}\n\nvar DBMode;\n(function (DBMode) {\n    DBMode[\"readonly\"] = \"readonly\";\n    DBMode[\"readwrite\"] = \"readwrite\";\n})(DBMode || (DBMode = {}));\nconst CONFIG_TOKEN = new InjectionToken(null);\n\nclass NgxIndexedDBService {\n    constructor(dbConfig, platformId) {\n        this.dbConfig = dbConfig;\n        this.platformId = platformId;\n        if (!dbConfig.name) {\n            throw new Error('NgxIndexedDB: Please, provide the dbName in the configuration');\n        }\n        if (!dbConfig.version) {\n            throw new Error('NgxIndexedDB: Please, provide the db version in the configuration');\n        }\n        this.isBrowser = isPlatformBrowser(this.platformId);\n        if (this.isBrowser) {\n            this.indexedDB =\n                window.indexedDB ||\n                    window.mozIndexedDB ||\n                    window.webkitIndexedDB ||\n                    window.msIndexedDB;\n            CreateObjectStore(this.indexedDB, dbConfig.name, dbConfig.version, dbConfig.objectStoresMeta, dbConfig.migrationFactory);\n            openDatabase(this.indexedDB, dbConfig.name).then((db) => {\n                if (db.version !== dbConfig.version) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.warn(`\n            Your DB Config doesn't match the most recent version of the DB with name ${this.dbConfig.name}, please update it\n            DB current version: ${db.version};\n            Your configuration: ${dbConfig.version};\n            `);\n                        console.warn(`Using latest version ${db.version}`);\n                    }\n                    this.dbConfig.version = db.version;\n                }\n            });\n        }\n    }\n    /**\n     * Allows to crate a new object store ad-hoc\n     * @param storeName The name of the store to be created\n     * @param migrationFactory The migration factory if exists\n     */\n    createObjectStore(storeSchema, migrationFactory) {\n        const storeSchemas = [storeSchema];\n        CreateObjectStore(this.indexedDB, this.dbConfig.name, ++this.dbConfig.version, storeSchemas, migrationFactory);\n    }\n    /**\n     * Adds new entry in the store and returns its key\n     * @param storeName The name of the store to add the item\n     * @param value The entry to be added\n     * @param key The optional key for the entry\n     */\n    add(storeName, value, key) {\n        return from(new Promise((resolve, reject) => {\n            openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version)\n                .then((db) => {\n                const transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, reject, resolve));\n                const objectStore = transaction.objectStore(storeName);\n                const request = Boolean(key)\n                    ? objectStore.add(value, key)\n                    : objectStore.add(value);\n                request.onsuccess = (evt) => {\n                    const result = evt.target.result;\n                    resolve(result);\n                };\n            })\n                .catch((reason) => reject(reason));\n        }));\n    }\n    /**\n     * Adds new entries in the store and returns its key\n     * @param storeName The name of the store to add the item\n     * @param values The entries to be added containing optional key attribute\n     */\n    bulkAdd(storeName, values) {\n        const promises = values.map((value) => {\n            return new Promise((resolve, reject) => {\n                openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version)\n                    .then((db) => {\n                    const transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, reject, resolve));\n                    const objectStore = transaction.objectStore(storeName);\n                    const key = value.key;\n                    delete value.key;\n                    const request = Boolean(key)\n                        ? objectStore.add(value, key)\n                        : objectStore.add(value);\n                    request.onsuccess = (evt) => {\n                        const result = evt.target.result;\n                        resolve(result);\n                    };\n                })\n                    .catch((reason) => reject(reason));\n            });\n        });\n        return from(Promise.resolve(Promise.all(promises)));\n    }\n    /**\n     * Adds new entry in the store and returns the item that was added\n     * @param storeName The name of the store to add the item\n     * @param value The entry to be added\n     * @param key The optional key for the entry\n     */\n    addItem(storeName, value, key) {\n        return from(new Promise((resolve, reject) => {\n            openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version)\n                .then((db) => {\n                const transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, reject, resolve));\n                const objectStore = transaction.objectStore(storeName);\n                const hasKey = Boolean(key);\n                const request = hasKey ? objectStore.add(value, key) : objectStore.add(value);\n                request.onsuccess = (evt) => {\n                    const result = evt.target.result;\n                    const itemKey = hasKey ? key : result;\n                    this.getByKey(storeName, itemKey).subscribe((newValue) => {\n                        resolve(newValue);\n                    });\n                };\n            })\n                .catch((reason) => reject(reason));\n        }));\n    }\n    /**\n     * Returns entry by key.\n     * @param storeName The name of the store to query\n     * @param key The entry key\n     */\n    getByKey(storeName, key) {\n        return from(new Promise((resolve, reject) => {\n            openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version)\n                .then((db) => {\n                const transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, reject, resolve));\n                const objectStore = transaction.objectStore(storeName);\n                const request = objectStore.get(key);\n                request.onsuccess = (event) => {\n                    resolve(event.target.result);\n                };\n                request.onerror = (event) => {\n                    reject(event);\n                };\n            })\n                .catch((reason) => reject(reason));\n        }));\n    }\n    /**\n     * Retrieve multiple entries in the store\n     * @param storeName The name of the store to retrieve the items\n     * @param keys The ids entries to be retrieve\n     */\n    bulkGet(storeName, keys) {\n        const promises = keys.map((key) => this.getByKey(storeName, key).toPromise());\n        return from(Promise.resolve(Promise.all(promises)));\n    }\n    /**\n     * Returns entry by id.\n     * @param storeName The name of the store to query\n     * @param id The entry id\n     */\n    getByID(storeName, id) {\n        return from(new Promise((resolve, reject) => {\n            openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version)\n                .then((db) => {\n                validateBeforeTransaction(db, storeName, reject);\n                const transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, reject, resolve));\n                const objectStore = transaction.objectStore(storeName);\n                const request = objectStore.get(id);\n                request.onsuccess = (event) => {\n                    resolve(event.target.result);\n                };\n            })\n                .catch((reason) => reject(reason));\n        }));\n    }\n    /**\n     * Returns entry by index.\n     * @param storeName The name of the store to query\n     * @param indexName The index name to filter\n     * @param key The entry key.\n     */\n    getByIndex(storeName, indexName, key) {\n        return from(new Promise((resolve, reject) => {\n            openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version)\n                .then((db) => {\n                validateBeforeTransaction(db, storeName, reject);\n                const transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, reject, resolve));\n                const objectStore = transaction.objectStore(storeName);\n                const index = objectStore.index(indexName);\n                const request = index.get(key);\n                request.onsuccess = (event) => {\n                    resolve(event.target.result);\n                };\n            })\n                .catch((reason) => reject(reason));\n        }));\n    }\n    /**\n     * Return all elements from one store\n     * @param storeName The name of the store to select the items\n     */\n    getAll(storeName) {\n        return from(new Promise((resolve, reject) => {\n            openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version)\n                .then((db) => {\n                validateBeforeTransaction(db, storeName, reject);\n                const transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, reject, resolve));\n                const objectStore = transaction.objectStore(storeName);\n                const request = objectStore.getAll();\n                request.onerror = (evt) => {\n                    reject(evt);\n                };\n                request.onsuccess = ({ target: { result: ResultAll } }) => {\n                    resolve(ResultAll);\n                };\n            })\n                .catch((reason) => reject(reason));\n        }));\n    }\n    /**\n     * Returns all items from the store after update.\n     * @param storeName The name of the store to update\n     * @param value The new value for the entry\n     * @param key The key of the entry to update if exists\n     */\n    update(storeName, value, key) {\n        return from(new Promise((resolve, reject) => {\n            openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version)\n                .then((db) => {\n                validateBeforeTransaction(db, storeName, reject);\n                const transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, reject, resolve));\n                const objectStore = transaction.objectStore(storeName);\n                transaction.oncomplete = () => {\n                    this.getAll(storeName)\n                        .pipe(take(1))\n                        .subscribe((newValues) => {\n                        resolve(newValues);\n                    });\n                };\n                key ? objectStore.put(value, key) : objectStore.put(value);\n            })\n                .catch((reason) => reject(reason));\n        }));\n    }\n    /**\n     * Returns the item you updated from the store after the update.\n     * @param storeName The name of the store to update\n     * @param value The new value for the entry\n     * @param key The key of the entry to update\n     */\n    updateByKey(storeName, value, key) {\n        return from(new Promise((resolve, reject) => {\n            openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version)\n                .then((db) => {\n                validateBeforeTransaction(db, storeName, reject);\n                const transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, reject, resolve));\n                const objectStore = transaction.objectStore(storeName);\n                transaction.oncomplete = () => {\n                    this.getByKey(storeName, key).subscribe((newValue) => {\n                        resolve(newValue);\n                    });\n                };\n                objectStore.put(value, key);\n            })\n                .catch((reason) => reject(reason));\n        }));\n    }\n    /**\n     * Returns all items from the store after delete.\n     * @param storeName The name of the store to have the entry deleted\n     * @param key The key of the entry to be deleted\n     */\n    delete(storeName, key) {\n        return from(new Promise((resolve, reject) => {\n            openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version)\n                .then((db) => {\n                validateBeforeTransaction(db, storeName, reject);\n                const transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, reject, resolve));\n                const objectStore = transaction.objectStore(storeName);\n                objectStore.delete(key);\n                transaction.oncomplete = () => {\n                    this.getAll(storeName)\n                        .pipe(take(1))\n                        .subscribe((newValues) => {\n                        resolve(newValues);\n                    });\n                };\n            })\n                .catch((reason) => reject(reason));\n        }));\n    }\n    /**\n     * Returns true from the store after a successful delete.\n     * @param storeName The name of the store to have the entry deleted\n     * @param key The key of the entry to be deleted\n     */\n    deleteByKey(storeName, key) {\n        return from(new Promise((resolve, reject) => {\n            openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version)\n                .then((db) => {\n                validateBeforeTransaction(db, storeName, reject);\n                const transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, reject, resolve));\n                const objectStore = transaction.objectStore(storeName);\n                transaction.oncomplete = () => {\n                    resolve(true);\n                };\n                objectStore.delete(key);\n            })\n                .catch((reason) => reject(reason));\n        }));\n    }\n    /**\n     * Returns true if successfully delete all entries from the store.\n     * @param storeName The name of the store to have the entries deleted\n     */\n    clear(storeName) {\n        return from(new Promise((resolve, reject) => {\n            openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version)\n                .then((db) => {\n                validateBeforeTransaction(db, storeName, reject);\n                const transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, reject, resolve));\n                const objectStore = transaction.objectStore(storeName);\n                objectStore.clear();\n                transaction.oncomplete = () => {\n                    resolve(true);\n                };\n            })\n                .catch((reason) => reject(reason));\n        }));\n    }\n    /**\n     * Returns true if successfully delete the DB.\n     */\n    deleteDatabase() {\n        return from(new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const db = yield openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version);\n                yield db.close();\n                const deleteDBRequest = this.indexedDB.deleteDatabase(this.dbConfig.name);\n                deleteDBRequest.onsuccess = () => {\n                    resolve(true);\n                };\n                deleteDBRequest.onerror = reject;\n                deleteDBRequest.onblocked = () => {\n                    throw new Error(`Unable to delete database because it's blocked`);\n                };\n            }\n            catch (evt) {\n                reject(evt);\n            }\n        })));\n    }\n    /**\n     * Returns the open cursor event\n     * @param storeName The name of the store to have the entries deleted\n     * @param keyRange The key range which the cursor should be open on\n     */\n    openCursor(storeName, keyRange) {\n        return from(new Promise((resolve, reject) => {\n            openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version)\n                .then((db) => {\n                validateBeforeTransaction(db, storeName, reject);\n                const transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, reject, resolve));\n                const objectStore = transaction.objectStore(storeName);\n                const request = keyRange === undefined ? objectStore.openCursor() : objectStore.openCursor(keyRange);\n                request.onsuccess = (event) => {\n                    resolve(event);\n                };\n            })\n                .catch((reason) => reject(reason));\n        }));\n    }\n    /**\n     * Open a cursor by index filter.\n     * @param storeName The name of the store to query.\n     * @param indexName The index name to filter.\n     * @param keyRange The range value and criteria to apply on the index.\n     */\n    openCursorByIndex(storeName, indexName, keyRange, mode = DBMode.readonly) {\n        const obs = new Subject();\n        openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version)\n            .then((db) => {\n            validateBeforeTransaction(db, storeName, (reason) => {\n                obs.error(reason);\n            });\n            const transaction = createTransaction(db, optionsGenerator(mode, storeName, (reason) => {\n                obs.error(reason);\n            }, () => {\n                obs.next();\n            }));\n            const objectStore = transaction.objectStore(storeName);\n            const index = objectStore.index(indexName);\n            const request = index.openCursor(keyRange);\n            request.onsuccess = (event) => {\n                obs.next(event);\n            };\n        })\n            .catch((reason) => obs.error(reason));\n        return obs;\n    }\n    /**\n     * Returns all items by an index.\n     * @param storeName The name of the store to query\n     * @param indexName The index name to filter\n     * @param keyRange  The range value and criteria to apply on the index.\n     */\n    getAllByIndex(storeName, indexName, keyRange) {\n        const data = [];\n        return from(new Promise((resolve, reject) => {\n            openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version)\n                .then((db) => {\n                validateBeforeTransaction(db, storeName, reject);\n                const transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, reject, resolve));\n                const objectStore = transaction.objectStore(storeName);\n                const index = objectStore.index(indexName);\n                const request = index.openCursor(keyRange);\n                request.onsuccess = (event) => {\n                    const cursor = event.target.result;\n                    if (cursor) {\n                        data.push(cursor.value);\n                        cursor.continue();\n                    }\n                    else {\n                        resolve(data);\n                    }\n                };\n            })\n                .catch((reason) => reject(reason));\n        }));\n    }\n    /**\n     * Returns all primary keys by an index.\n     * @param storeName The name of the store to query\n     * @param indexName The index name to filter\n     * @param keyRange  The range value and criteria to apply on the index.\n     */\n    getAllKeysByIndex(storeName, indexName, keyRange) {\n        const data = [];\n        return from(new Promise((resolve, reject) => {\n            openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version)\n                .then((db) => {\n                validateBeforeTransaction(db, storeName, reject);\n                const transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, reject, resolve));\n                const objectStore = transaction.objectStore(storeName);\n                const index = objectStore.index(indexName);\n                const request = index.openKeyCursor(keyRange);\n                request.onsuccess = (event) => {\n                    const cursor = event.target.result;\n                    if (cursor) {\n                        data.push({ primaryKey: cursor.primaryKey, key: cursor.key });\n                        cursor.continue();\n                    }\n                    else {\n                        resolve(data);\n                    }\n                };\n            })\n                .catch((reason) => reject(reason));\n        }));\n    }\n    /**\n     * Returns the number of rows in a store.\n     * @param storeName The name of the store to query\n     * @param keyRange  The range value and criteria to apply.\n     */\n    count(storeName, keyRange) {\n        return from(new Promise((resolve, reject) => {\n            openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version)\n                .then((db) => {\n                validateBeforeTransaction(db, storeName, reject);\n                const transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, reject, resolve));\n                const objectStore = transaction.objectStore(storeName);\n                const request = objectStore.count(keyRange);\n                request.onerror = (e) => reject(e);\n                request.onsuccess = (e) => resolve(e.target.result);\n            })\n                .catch((reason) => reject(reason));\n        }));\n    }\n}\nNgxIndexedDBService.decorators = [\n    { type: Injectable }\n];\nNgxIndexedDBService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [CONFIG_TOKEN,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\n];\n\nclass NgxIndexedDBModule {\n    static forRoot(dbConfig) {\n        return {\n            ngModule: NgxIndexedDBModule,\n            providers: [NgxIndexedDBService, { provide: CONFIG_TOKEN, useValue: dbConfig }]\n        };\n    }\n}\nNgxIndexedDBModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [],\n                imports: [CommonModule]\n            },] }\n];\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CONFIG_TOKEN, DBMode, NgxIndexedDBModule, NgxIndexedDBService };\n//# sourceMappingURL=ngx-indexed-db.js.map\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || from);\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","export default \"<app-split-body [isLoading$]=\\\"!isLoading$\\\">\\n  <div class=\\\"left-section\\\">\\n    <mdb-card>\\n      <mdb-card-header class=\\\"w-100 d-flex justify-space-between bg-primary white-text\\\">\\n        <div>\\n          <blockquote class=\\\"text-left  blockquote bq-success\\\">\\n            <h3 class=\\\"header\\\">Add Expense</h3>\\n          </blockquote>\\n        </div>\\n        <button mdbWavesEffect mdbBtn type=\\\"button\\\" rounded=\\\"true\\\" color=\\\"white\\\" class=\\\"pull-right text-lg btn-primary\\\" rrDatePicker [date]=\\\"expenseDate\\\" [endDate]=\\\"endDate\\\" [startDate]=\\\"startDate\\\"\\n        header=\\\"Select Date\\\" (dateSelected)=\\\"expDatePicked($event)\\\">\\n        <mdb-icon fas icon=\\\"calendar-alt mr-2\\\" size=\\\"lg\\\" class=\\\"calendar\\\" alt=\\\"date\\\"></mdb-icon> <span appDateTransform [date]=\\\"expenseDate.format('YYYYMMDD')\\\"></span>\\n      </button>\\n      </mdb-card-header>\\n  \\n      <mdb-card-body class=\\\"py-2\\\">\\n        <form #expenseForm=\\\"ngForm\\\">\\n          <div class=\\\"d-flex\\\">\\n          <div class=\\\"md-form\\\">\\n            <input type=\\\"text\\\" id=\\\"item\\\" name=\\\"item\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"expense.item\\\" mdbInput mdbValidate [validateSuccess]=\\\"false\\\" #item=\\\"ngModel\\\" required>\\n            <label for=\\\"item\\\">Item</label>\\n            <mdb-error *ngIf=\\\"item && item.invalid && (item.dirty || item.touched)\\\">item is required</mdb-error>\\n          </div>\\n          <div class=\\\"suggestion-container\\\" *ngIf=\\\"frequentExpenses?.length\\\">\\n            <mdb-badge class=\\\"cursor-pointer mr-1\\\" *ngFor=\\\"let expenseName of frequentExpenses\\\" pill=\\\"true\\\" [info]=\\\"expense.item !== expenseName\\\" [success]=\\\"expense.item === expenseName\\\" (click)=\\\"expense.item = expenseName\\\">{{ expenseName }}</mdb-badge>\\n          </div>\\n          </div>\\n\\n          <div class=\\\"md-form\\\" style=\\\"margin-top: 15px;\\\">\\n            <textarea type=\\\"text\\\" id=\\\"description\\\" name=\\\"description\\\" class=\\\"my-0 py-0 md-textarea form-control\\\" \\n            #description=\\\"ngModel\\\" [(ngModel)]=\\\"expense.description\\\" mdbInput mdbValidate\\n              [validateSuccess]=\\\"false\\\" required></textarea>\\n            <label for=\\\"description\\\">Description</label>\\n            <mdb-error *ngIf=\\\"description && description.invalid && (description.dirty || description.touched)\\\">Description is required</mdb-error>\\n          </div>\\n\\n          <div class=\\\"text-lg\\\">\\n            <label for=\\\"cost\\\" class=\\\"grey-text\\\">Cost</label>\\n            <div class=\\\"md-form mt-0\\\">\\n              <span class=\\\"d-flex\\\">\\n                <span class=\\\"price\\\">&#x20B9;</span>\\n                <input type=\\\"number\\\" class=\\\"form-control price\\\" id=\\\"cost\\\" name=\\\"cost\\\" [(ngModel)]=\\\"expense.cost\\\" #cost=\\\"ngModel\\\" mdbValidate [validateSuccess]=\\\"false\\\" required>\\n              </span>\\n              <mdb-error class=\\\"ml-3\\\" *ngIf=\\\"cost && cost.invalid && (cost.dirty || cost.touched)\\\">Cost is required</mdb-error>\\n            </div>\\n          </div>\\n\\n        </form>\\n      </mdb-card-body>\\n      <mdb-card-footer class=\\\"d-flex\\\">\\n        <button type=\\\"button\\\" mdbBtn color=\\\"white\\\" class=\\\"relative waves-light pull-right\\\" mdbWavesEffect (click)=\\\"expenseForm.reset()\\\">Clear\\n          </button>\\n        <button type=\\\"button\\\" mdbBtn color=\\\"success\\\" [disabled]=\\\"expenseForm.invalid || (isLoading$ | async)\\\" class=\\\"relative waves-light pull-right\\\" mdbWavesEffect (click)=\\\"onSave()\\\">Save\\n          </button>\\n\\n      </mdb-card-footer>\\n    </mdb-card>\\n\\n\\n    <mdb-card class=\\\"mt-2\\\" *ngIf=\\\"(isManager$ | async)\\\">\\n      <!-- salary section -->\\n      <mdb-card-header class=\\\"w-100 d-flex justify-space-between bg-primary white-text\\\">\\n        <div>\\n          <blockquote class=\\\"text-left  blockquote bq-success\\\">\\n            <h3 class=\\\"header\\\">Record Salary</h3>\\n          </blockquote>\\n        </div>\\n        <button mdbWavesEffect mdbBtn type=\\\"button\\\" rounded=\\\"true\\\" color=\\\"white\\\" class=\\\"pull-right text-lg btn-primary\\\" rrDatePicker [date]=\\\"salaryDate\\\" [endDate]=\\\"endDate\\\" [startDate]=\\\"startDate\\\"\\n        header=\\\"Select Salary Given Date\\\" (dateSelected)=\\\"salDatePicked($event)\\\">\\n        <mdb-icon fas icon=\\\"calendar-alt mr-2\\\" size=\\\"lg\\\" class=\\\"calendar\\\" alt=\\\"date\\\"></mdb-icon> {{ salaryDate.format('dddd DD/MM/YYYY') }}\\n      </button>\\n      </mdb-card-header>\\n  \\n      <mdb-card-body class=\\\"py-2\\\">\\n        <form #salaryForm=\\\"ngForm\\\">\\n          <div class=\\\"d-flex\\\">\\n          <div class=\\\"md-form\\\">\\n            <input type=\\\"text\\\" id=\\\"description\\\" name=\\\"description\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"salary.description\\\" mdbInput mdbValidate [validateSuccess]=\\\"false\\\" #description=\\\"ngModel\\\" required>\\n            <label for=\\\"description\\\">Paid To:</label>\\n            <mdb-error *ngIf=\\\"description && description.invalid && (description.dirty || description.touched)\\\">Person Name is required</mdb-error>\\n          </div>\\n          <div class=\\\"suggestion-container\\\" *ngIf=\\\"frequentSalaries?.length\\\">\\n            <mdb-badge class=\\\"cursor-pointer mr-1\\\" *ngFor=\\\"let item of frequentSalaries\\\" pill=\\\"true\\\" [info]=\\\"item.person !== salary.description\\\" [success]=\\\"item.person === salary.description\\\" (click)=\\\"salary.description = item.person; salary.cost = item.amount\\\">{{ item.person }}</mdb-badge>\\n          </div>\\n          </div>\\n\\n          <div class=\\\"text-lg\\\">\\n            <label for=\\\"cost\\\" class=\\\"grey-text\\\">Amount</label>\\n            <div class=\\\"md-form mt-0\\\">\\n              <span class=\\\"d-flex\\\">\\n                <span class=\\\"price\\\">&#x20B9;</span>\\n                <input type=\\\"number\\\" class=\\\"form-control price\\\" id=\\\"cost\\\" name=\\\"cost\\\" [(ngModel)]=\\\"salary.cost\\\" #cost=\\\"ngModel\\\" mdbValidate [validateSuccess]=\\\"false\\\" required>\\n              </span>\\n              <mdb-error class=\\\"ml-3\\\" *ngIf=\\\"cost && cost.invalid && (cost.dirty || cost.touched)\\\">Amount is required</mdb-error>\\n            </div>\\n          </div>\\n\\n        </form>\\n      </mdb-card-body>\\n      <mdb-card-footer class=\\\"d-flex\\\">\\n        <button type=\\\"button\\\" mdbBtn color=\\\"white\\\" class=\\\"relative waves-light pull-right\\\" mdbWavesEffect (click)=\\\"salaryForm.reset()\\\">Clear\\n          </button>\\n        <button type=\\\"button\\\" mdbBtn color=\\\"success\\\" [disabled]=\\\"salaryForm.invalid || (isLoading$ | async)\\\" class=\\\"relative waves-light pull-right\\\" mdbWavesEffect (click)=\\\"onSalarySave(salaryForm)\\\">Save\\n          </button>\\n\\n      </mdb-card-footer>\\n    </mdb-card>\\n  </div>\\n  <div class=\\\"right-section pb-4\\\">\\n    <app-right-card [header]=\\\"'Todays Expenses'\\\" >\\n      <div class=\\\"card-header bg-primary white-text\\\">\\n        <span class=\\\"icon-button\\\" (click)=\\\"prevDate()\\\">\\n          <mdb-icon *ngIf=\\\"isManager$ | async\\\" fas icon=\\\"chevron-left\\\" class=\\\"ml-1 float-left delete cursor-pointer white-text\\\" alt=\\\"Left\\\"></mdb-icon>\\n        </span>\\n        <span>\\n          Expense on \\n          <button mdbWavesEffect mdbBtn type=\\\"button\\\" rounded=\\\"true\\\" color=\\\"white\\\" class=\\\"pull-right text-lg btn-primary\\\" rrDatePicker [date]=\\\"defaultDate\\\" [endDate]=\\\"defaultDate\\\" [startDate]=\\\"startDate\\\"\\n          (click)=\\\"dateClicked($event)\\\" header=\\\"Select Date\\\" (dateSelected)=\\\"datePicked($event)\\\">\\n            <mdb-icon fas icon=\\\"calendar-alt mr-2\\\" size=\\\"lg\\\" class=\\\"calendar\\\" alt=\\\"date\\\"></mdb-icon> {{ formattedDate }}\\n          </button>\\n        </span>\\n        <span class=\\\"icon-button\\\" (click)=\\\"nextDate()\\\">\\n          <mdb-icon *ngIf=\\\"(isManager$ | async) && selectedDate.format('DD/MM/YYYY') !== defaultDate.format('DD/MM/YYYY')\\\" mdbtn fas icon=\\\"chevron-right\\\" class=\\\"ml-1 float-right delete cursor-pointer white-text\\\" alt=\\\"Right\\\"></mdb-icon>\\n        </span>\\n      </div>\\n      <div *ngIf=\\\"isLoading$ | async\\\" class=\\\"d-flex justify-content-center align-items-center\\\">\\n        <div class=\\\"spinner-grow text-primary\\\" role=\\\"status\\\" style=\\\"width: 4rem; height: 4rem;\\\">\\n          <span class=\\\"sr-only\\\">Loading...</span>\\n        </div>\\n      </div>\\n      <table mdbTable small=\\\"true\\\" striped=\\\"true\\\" *ngIf=\\\"!(isLoading$ | async) && todaysExpenseList.length > 0\\\">\\n        <thead>\\n          <tr>\\n            <th>Item</th>\\n            <th>Description</th>\\n            <th>Cost</th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          <tr *ngFor=\\\"let item of todaysExpenseList\\\" [class.salary]=\\\"item?.item === 'Salary'\\\">\\n            <td scope=\\\"row\\\">{{ item?.item }}</td>\\n            <td>{{ item?.description }}</td>\\n            <td class=\\\"table-price\\\">&#x20B9;{{ item?.cost }}\\n              <mdb-icon *ngIf=\\\"isManager$ | async\\\" fas icon=\\\"trash\\\" class=\\\"ml-1 float-right delete grey-text\\\" (click)=\\\"onDelete(item?.uuid)\\\" alt=\\\"Delete\\\"></mdb-icon>\\n            </td>\\n          </tr>\\n\\n          <tr>\\n          </tr>\\n        </tbody>\\n      </table>\\n      <div role=\\\"footer\\\" *ngIf=\\\"!(isLoading$ | async)\\\">\\n        <div class=\\\"card-footer text-muted\\\">\\n          Total: <b class=\\\"price total-amount\\\">&#x20B9;{{getTotalExpense()}}</b>\\n        </div>\\n      </div>\\n    </app-right-card>\\n\\n    <!-- <div *ngIf=\\\"isLoading$ | async\\\" class=\\\"d-flex justify-content-center align-items-center\\\" style=\\\"margin-top: 200px\\\">\\n      <div class=\\\"spinner-grow text-primary\\\" role=\\\"status\\\" style=\\\"width: 4rem; height: 4rem;\\\">\\n        <span class=\\\"sr-only\\\">Loading...</span>\\n      </div>\\n    </div> -->\\n  </div>\\n</app-split-body>\\n\\n\"","export default \".justify-space-between {\\n  justify-content: space-between;\\n}\\n\\n.price {\\n  font-size: 24px;\\n}\\n\\n.table-price {\\n  font-weight: bold;\\n}\\n\\n.right-section table {\\n  text-align: left;\\n  margin-bottom: 0;\\n}\\n\\n.right-section table .total-amount {\\n  font-weight: bold;\\n  font-size: 18px;\\n}\\n\\n.right-section table .delete {\\n  cursor: pointer;\\n}\\n\\n.right-section table tr.salary {\\n  background-color: #d8fdd8;\\n}\\n\\n.card-header {\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between;\\n}\\n\\n.card-body {\\n  padding: 0 1.25rem;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Wb2x1bWVzL3N0b3JlL2NvZGUvQXVkaXQtVUktQW5ndWxhci9zcmMvYXBwL2V4cGVuc2VzL2NvbnRhaW5lcnMvZXhwZW5zZXMuY29tcG9uZW50LnNjc3MiLCJzcmMvYXBwL2V4cGVuc2VzL2NvbnRhaW5lcnMvZXhwZW5zZXMuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSw4QkFBQTtBQ0NKOztBREVBO0VBQ0ksZUFBQTtBQ0NKOztBREVBO0VBQ0ksaUJBQUE7QUNDSjs7QURJSTtFQUNJLGdCQUFBO0VBQ0EsZ0JBQUE7QUNEUjs7QURHUTtFQUNJLGlCQUFBO0VBQ0EsZUFBQTtBQ0RaOztBREdRO0VBQ0ksZUFBQTtBQ0RaOztBREdRO0VBQ0kseUJBQUE7QUNEWjs7QURPQTtFQUNJLGFBQUE7RUFDQSxtQkFBQTtFQUNBLDhCQUFBO0FDSko7O0FET0E7RUFDSSxrQkFBQTtBQ0pKIiwiZmlsZSI6InNyYy9hcHAvZXhwZW5zZXMvY29udGFpbmVycy9leHBlbnNlcy5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5qdXN0aWZ5LXNwYWNlLWJldHdlZW4ge1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbjtcbn1cblxuLnByaWNlIHtcbiAgICBmb250LXNpemU6IDI0cHg7XG59XG5cbi50YWJsZS1wcmljZSB7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi5yaWdodC1zZWN0aW9uIHtcbiBcbiAgICB0YWJsZSB7XG4gICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDA7XG5cbiAgICAgICAgLnRvdGFsLWFtb3VudCB7XG4gICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICAgICAgfVxuICAgICAgICAuZGVsZXRlIHtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgfVxuICAgICAgICB0ci5zYWxhcnkge1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIxNiwgMjUzLCAyMTYpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cbi5jYXJkLWhlYWRlciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbjtcbn1cbiAgIFxuLmNhcmQtYm9keSB7XG4gICAgcGFkZGluZzogMCAxLjI1cmVtO1xufSIsIi5qdXN0aWZ5LXNwYWNlLWJldHdlZW4ge1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG59XG5cbi5wcmljZSB7XG4gIGZvbnQtc2l6ZTogMjRweDtcbn1cblxuLnRhYmxlLXByaWNlIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi5yaWdodC1zZWN0aW9uIHRhYmxlIHtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbiAgbWFyZ2luLWJvdHRvbTogMDtcbn1cbi5yaWdodC1zZWN0aW9uIHRhYmxlIC50b3RhbC1hbW91bnQge1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgZm9udC1zaXplOiAxOHB4O1xufVxuLnJpZ2h0LXNlY3Rpb24gdGFibGUgLmRlbGV0ZSB7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cbi5yaWdodC1zZWN0aW9uIHRhYmxlIHRyLnNhbGFyeSB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNkOGZkZDg7XG59XG5cbi5jYXJkLWhlYWRlciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbjtcbn1cblxuLmNhcmQtYm9keSB7XG4gIHBhZGRpbmc6IDAgMS4yNXJlbTtcbn0iXX0= */\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AppState } from 'src/app/reducers';\nimport { getExpenses, getIsLoading } from '../store/expenses.selectors';\nimport * as fromExpenses from '../store/expenses.actions';\nimport { isManager } from '../../auth/store/auth.selectors';\nimport { Expenses } from '../models/expenses.model';\nimport { MDBModalRef, MDBModalService } from 'angular-bootstrap-md';\nimport { ConfirmModalComponent } from 'src/app/shared/components/confirm-modal/confirm-modal.component';\nimport { take } from 'rxjs/operators';\nimport { NgxIndexedDBService } from 'ngx-indexed-db';\n\nvar moment = require('../../../assets/datepicker/moment.js');\n\n@Component({\n  selector: 'app-expenses',\n  templateUrl: './expenses.component.html',\n  styleUrls: ['./expenses.component.scss']\n})\nexport class ExpensesComponent implements OnInit {\n  isLoading$: Observable<boolean>;\n  isManager$: Observable<boolean>;\n  \n  expenseDate = moment();\n  salaryDate = moment();\n\n  defaultDate = moment();\n  startDate = moment().subtract(60, 'days');\n  endDate = moment().add('30', 'days');\n  selectedDate = moment();\n  \n  expense: any = {\n    ist_YYYYMMDD: moment().format('YYYY-MM-DD')\n  };\n  salary: any = {\n    item: 'Salary',\n    description: '',\n    cost: '',\n    ist_YYYYMMDD: moment().format('YYYY-MM-DD')\n  };\n\n  todaysExpenseList: Expenses[];\n\n  frequentExpenses: Array<string>\n  frequentSalaries: Array<any>\n\n  @ViewChild('expenseForm', { static: true }) expenseForm: NgForm;\n  @ViewChild('salaryForm', { static: true }) salaryForm: NgForm;\n  \n  private modalRef: MDBModalRef;\n\n\n  constructor(\n    private store: Store<AppState>,\n    private modalService: MDBModalService,\n    private idbService: NgxIndexedDBService\n  ) {}\n\n  get formattedDate() {\n    return this.selectedDate.format('dddd DD/MM/YYYY');\n  }\n\n  dateClicked(event: any) {\n    console.log(event);\n  }\n\n  expDatePicked(date: any) {\n    this.expenseDate = date;\n    this.expense.ist_YYYYMMDD = date.format('YYYY-MM-DD');\n  }\n\n  salDatePicked(date: any) {\n    this.salaryDate = date;\n    this.salary.ist_YYYYMMDD = date.format('YYYY-MM-DD');\n  }\n  \n  datePicked(date: any) {\n    this.selectedDate = date;\n    this.store.dispatch(new fromExpenses.ExpensesQuery(date.format('YYYY-MM-DD')));\n  }\n\n  prevDate() {\n    this.datePicked(this.selectedDate.subtract('1', 'days'));\n  }\n\n  nextDate() {\n    this.datePicked(this.selectedDate.add('1', 'days'));\n  }\n\n  ngOnInit(): void {\n    this.store.select(getExpenses).subscribe((exp: Expenses[]) => {\n      this.todaysExpenseList = exp;\n      this.fetchFrequentExpenses();\n      this.fetchFrequentSalaries();\n    });\n    this.isLoading$ = this.store.select(getIsLoading);\n    this.isManager$ = this.store.select(isManager);\n    this.store.dispatch(new fromExpenses.ExpensesQuery(this.selectedDate.format('YYYY-MM-DD')));\n  }\n\n  fetchFrequentExpenses() {\n    this.idbService\n      .getAll('expenses')\n      .subscribe((expense: any) => {\n        if (expense && expense.length > 0) {\n          expense = expense.sort((a: any, b: any) => {\n            if (a.frequency > b.frequency) {\n              return -1;\n            } else if (a.frequency > b.frequency){\n              return 1;\n            }\n            return 0;\n          }).splice(0, 5);\n          this.frequentExpenses = expense.map((data: any) => data.item);\n        }\n      });\n  }\n\n  fetchFrequentSalaries() {\n    this.idbService\n      .getAll('salary')\n      .subscribe((salary: any) => {\n        if (salary && salary.length > 0) {\n          this.frequentSalaries = salary.sort((a: any, b: any) => {\n            if (a.frequency > b.frequency) {\n              return -1;\n            } else if (a.frequency > b.frequency){\n              return 1;\n            }\n            return 0;\n          }).splice(0, 5);\n        }\n      });\n  }\n\n  onSave() {\n    this.store.dispatch(new fromExpenses.ExpensesAddQuery(this.expense));\n    const expenseCopy = JSON.parse(JSON.stringify(this.expense));\n    this.idbService\n      .getByKey('expenses', expenseCopy.item)\n      .subscribe((data) => {\n        if (!data) {\n          this.idbService.add('expenses', {\n            item: expenseCopy.item,\n            frequency: 1\n          })\n        } else {\n          this.idbService.update('expenses',\n          {\n            item: expenseCopy.item,\n            frequency: (data as any).frequency + 1\n          }, (data as any).key)\n        }\n      });\n      this.expense = {\n        ist_YYYYMMDD: moment().format('YYYY-MM-DD')\n      };\n      this.expenseForm.reset();\n      this.selectedDate = moment();\n      this.expenseDate = moment();\n  }\n\n  resetAll() {\n    \n    \n  }\n\n  getTotalExpense() {\n    if (this.todaysExpenseList && this.todaysExpenseList.length > 0) {\n      return this.todaysExpenseList.reduce(((prev ,current: any) => +(current.cost) + prev), 0);\n    }\n    return '0';\n  }\n\n  onDelete(uuid: string) {\n    this.modalRef = this.modalService.show(\n      ConfirmModalComponent,{class: 'modal-dialog-centered'}\n    );\n\n    this.modalRef.content.confirmation\n      .pipe(take(1))\n      .subscribe((confirmation: boolean) => {\n        if (confirmation) {\n          this.store.dispatch(new fromExpenses.ExpensesDeleted({ uuid: uuid }));\n        }\n      });\n  }\n\n  onSalarySave(form: NgForm) {\n    this.store.dispatch(new fromExpenses.ExpensesAddQuery(this.salary));\n    const salaryCopy = JSON.parse(JSON.stringify(this.salary));\n    this.idbService\n      .getByKey('salary', salaryCopy.description)\n      .subscribe((data) => {\n        if (!data) {\n          this.idbService.add('salary', {\n            person: salaryCopy.description,\n            amount: salaryCopy.cost,\n            frequency: 1\n          })\n        } else {\n          this.idbService.update('salary',\n          {\n            person: salaryCopy.description,\n            amount: salaryCopy.cost,\n            frequency: (data as any).frequency + 1\n          }, (data as any).key)\n        }\n      });\n\n    this.salary = {\n      item: 'Salary',\n      description: '',\n      cost: '',\n      ist_YYYYMMDD: moment().format('YYYY-MM-DD')\n    };\n    form.reset();\n    this.salaryDate = moment();\n    this.salary = {};\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ExpensesComponent } from './containers/expenses.component';\n\nconst routes: Routes = [{ path: '', component: ExpensesComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ExpensesRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ExpensesRoutingModule } from './expenses-routing.module';\nimport { ExpensesComponent } from './containers/expenses.component';\nimport { FormsModule } from '@angular/forms';\nimport { ButtonsModule, InputsModule, TableModule, IconsModule, ModalModule, CardsModule, InputUtilitiesModule, BadgeModule } from 'angular-bootstrap-md';\n\nimport * as fromExpenses from './store/expenses.reducer';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { ExpensesEffects } from './store/expenses.effects';\nimport { CoreModule } from '../core/core.module';\nimport { SharedModule } from '../shared/shared.module';\nimport { IndexedDBModule } from './indexedDB/indexedDB.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ExpensesRoutingModule,\n    ModalModule,\n    FormsModule,\n    ButtonsModule,\n    InputUtilitiesModule,\n    InputsModule,\n    IconsModule,\n    TableModule,\n    CoreModule,\n    SharedModule,\n    CardsModule,\n    IndexedDBModule,\n    BadgeModule,\n    StoreModule.forFeature('expenses', fromExpenses.ExpensesReducer),\n    EffectsModule.forFeature([ExpensesEffects])\n  ],\n  declarations: [ExpensesComponent],\n  exports: [ExpensesComponent]\n})\nexport class ExpensesModule { }\n","import { NgModule } from '@angular/core';\nimport { DBConfig, NgxIndexedDBModule } from 'ngx-indexed-db';\n\nexport function migrationFactory() {\n  // The animal table was added with version 2 but none of the existing tables or data needed\n  // to be modified so a migrator for that version is not included.\n  return {\n    1: (db: any, transaction: any) => {\n      console.log(db);\n      const store1 = transaction.objectStore('expenses');\n      store1.createIndex('item', 'item', { unique: true });\n      store1.createIndex('frequency', 'frequency', { unique: false });\n      \n      const store2 = transaction.objectStore('salary');\n      store2.createIndex('person', 'person', { unique: true });\n      store2.createIndex('amount', 'amount', { unique: false });\n      store2.createIndex('frequency', 'frequency', { unique: false });\n    }\n  };\n}\n\nconst dbConfig: DBConfig  = {\n  name: 'RRDB',\n  version: 1,\n  objectStoresMeta: [{\n    store: 'expenses',\n    storeConfig: { keyPath: 'item', autoIncrement: false },\n    storeSchema: [\n      { name: 'item', keypath: 'item', options: { unique: true } },\n      { name: 'frequency', keypath: 'frequency', options: { unique: false } }\n    ]\n  },{\n    store: 'salary',\n    storeConfig: { keyPath: 'person', autoIncrement: false },\n    storeSchema: [\n      { name: 'person', keypath: 'person', options: { unique: true } },\n      { name: 'amount', keypath: 'amount', options: { unique: false } },\n      { name: 'frequency', keypath: 'frequency', options: { unique: false } }\n    ]\n  }],\n  migrationFactory\n};\n\n@NgModule({\n  imports: [\n    NgxIndexedDBModule.forRoot(dbConfig)\n  ]\n})\nexport class IndexedDBModule { }","import { Injectable } from '@angular/core';\nimport { Expenses } from '../models/expenses.model';\nimport { of } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExpensesService {\n\n  constructor(private http: HttpClient) { }\n\n  get userId() {\n    return 'uid';\n  }\n\n  addExpenses(expenses: Expenses) {\n    return this.http.post(\n      `${environment.apiUrl}?api=addExpense`, { \n        ...expenses }\n    );\n  }\n\n  get(request: any) {\n    return this.http.get(\n      `${environment.apiUrl}?api=listExpenses`, \n      {\n        params: {\n        'ist_YYYYMMDD': request.payload\n        }\n      }\n    );\n  }\n\n  update(expenses: Expenses, userId: string) {\n    return of([expenses, userId]);\n\n  }\n\n  deleteExpense(uuId: string) {\n    return this.http.post(\n      `${environment.apiUrl}?api=deleteExpense`, { \n        'uuid': uuId   \n      }\n    );\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { Expenses } from '../models/expenses.model';\n\nexport enum ExpensesActionTypes {\n  EXPENSES_QUERY = '[Expenses] Query',\n  EXPENSES_LOADED = '[Expenses] Fetched',\n\n  EXPENSES_ADD_QUERY = '[Expenses] Added',\n  EXPENSES_EDITED = '[Expenses] Edited',\n  EXPENSES_DELETED = '[Expenses] Deleted',\n\n  EXPENSES_ERROR = '[Expenses] Error'\n}\n\nexport class ExpensesQuery implements Action {\n  readonly type = ExpensesActionTypes.EXPENSES_QUERY;\n  \n  constructor(public payload: { date: any }) {}\n}\n\nexport class ExpensesLoaded implements Action {\n  readonly type = ExpensesActionTypes.EXPENSES_LOADED;\n\n  constructor(public payload: { expenses: Expenses[] }) {}\n}\n\nexport class ExpensesAddQuery implements Action {\n  readonly type = ExpensesActionTypes.EXPENSES_ADD_QUERY;\n\n  constructor(public payload: { expenses: Expenses }) {}\n}\n\nexport class ExpensesEdited implements Action {\n  readonly type = ExpensesActionTypes.EXPENSES_EDITED;\n\n  constructor(public payload: { expenses: Expenses }) {}\n}\n\nexport class ExpensesDeleted implements Action {\n  readonly type = ExpensesActionTypes.EXPENSES_DELETED;\n\n  constructor(public payload: { uuid: string }) {}\n}\n\nexport class ExpensesError implements Action {\n  readonly type = ExpensesActionTypes.EXPENSES_ERROR;\n\n  constructor(public payload: { error: any }) {}\n}\n\nexport type ExpensesActions =\n  | ExpensesQuery\n  | ExpensesLoaded\n  | ExpensesAddQuery\n  | ExpensesEdited\n  | ExpensesDeleted\n  | ExpensesError;\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { ExpensesService } from '../services/expenses.service';\nimport { ExpensesActionTypes } from './expenses.actions';\nimport { switchMap, map, catchError, withLatestFrom } from 'rxjs/operators';\n\nimport * as fromExpenses from './expenses.actions';\nimport { of } from 'rxjs';\nimport { Store, select } from '@ngrx/store';\nimport { AppState } from '../../reducers/index';\nimport { getUser } from '../../auth/store/auth.selectors';\n\nvar moment = require('../../../assets/datepicker/moment.js');\n\n@Injectable()\nexport class ExpensesEffects {\n\n  constructor(private actions$: Actions, private expensesService: ExpensesService, private store: Store<AppState>) {}\n\n  @Effect()\n  query$ = this.actions$.pipe(\n    ofType(ExpensesActionTypes.EXPENSES_QUERY),\n    switchMap((payload: any) => this.expensesService.get(payload)\n      .pipe(\n        map((data: any) => {\n          return (new fromExpenses.ExpensesLoaded({ expenses: data.expensesList }));\n        }),\n        catchError(error => {\n          return of(new fromExpenses.ExpensesError({ error }));\n        })\n      )\n    ),\n  );\n\n  @Effect()\n  added$ = this.actions$.pipe(\n    ofType(ExpensesActionTypes.EXPENSES_ADD_QUERY),\n    map((action: fromExpenses.ExpensesAddQuery) => action.payload),\n    switchMap((payload: any) => this.expensesService.addExpenses(payload)\n    .pipe(\n      (map(() => {\n        return (new fromExpenses.ExpensesQuery(moment().format('YYYY-MM-DD')));\n      })),\n      catchError(error => {\n        return of(new fromExpenses.ExpensesError({ error }));\n      })\n    ))\n  );\n\n  @Effect()\n  edit$ = this.actions$.pipe(\n    ofType(ExpensesActionTypes.EXPENSES_EDITED),\n    map((action: fromExpenses.ExpensesEdited) => action.payload),\n    withLatestFrom(this.store.pipe(select(getUser))),\n    switchMap(([payload, user]: any) => this.expensesService.update(payload.customer, user.temple_code)\n    .pipe(\n      catchError( error => {\n      return of(new fromExpenses.ExpensesError({ error }));\n    }))\n    )\n  );\n\n  @Effect()\n  delete$ = this.actions$.pipe(\n    ofType(ExpensesActionTypes.EXPENSES_DELETED),\n    map((action: fromExpenses.ExpensesDeleted) => action.payload),\n    withLatestFrom(this.store.pipe(select(getUser))),\n    switchMap(([payload]: any) => this.expensesService.deleteExpense(payload.uuid)\n    .pipe(\n      (map(() => {\n        return (new fromExpenses.ExpensesQuery(moment().format('YYYY-MM-DD')));\n      })),\n      catchError(error => {\n        return of(new fromExpenses.ExpensesError({ error }));\n      })\n    ))\n  );\n}\n","import { ExpensesInitialState, ExpensesState } from './expenses.state';\nimport { ExpensesActions, ExpensesActionTypes } from './expenses.actions';\n\nexport function ExpensesReducer(state = ExpensesInitialState, action: ExpensesActions): ExpensesState {\n  switch (action.type) {\n\n    case ExpensesActionTypes.EXPENSES_QUERY: {\n      return Object.assign({}, state, {\n        isLoading: true,\n      });\n    }\n\n    case ExpensesActionTypes.EXPENSES_ADD_QUERY: {\n      return Object.assign({}, state, {\n        isLoading: true,\n      });\n    }\n\n    case ExpensesActionTypes.EXPENSES_LOADED: {\n      return Object.assign({}, state, {\n        expenses: action.payload.expenses,\n        isLoading: false,\n      });\n    }\n\n    case ExpensesActionTypes.EXPENSES_ERROR: {\n      return Object.assign({}, state, {\n        isLoading: false,\n        error: action.payload.error\n      });\n    }\n\n    default:\n      return state;\n  }\n}\n","import { createSelector, createFeatureSelector } from '@ngrx/store';\nimport { ExpensesState } from './expenses.state';\n\nexport const getExpensesState = createFeatureSelector<ExpensesState>('expenses');\n\nexport const getExpenses = createSelector(\n  getExpensesState,\n  expenses => expenses.expenses\n);\n\nexport const getIsLoading = createSelector(\n  getExpensesState,\n  expenses => expenses.isLoading\n);\n\nexport const getError = createSelector(\n  getExpensesState,\n  expenses => expenses.error\n);\n","import { Expenses } from '../models/expenses.model';\n\nexport interface ExpensesState {\n    expenses: Expenses[] | null;\n    isLoading: boolean;\n    error: any;\n}\n\nexport const ExpensesInitialState: ExpensesState = {\n    expenses: [],\n    isLoading: true,\n    error: null\n};\n"],"sourceRoot":"webpack:///"}